// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(VIEWER)
  bio           String?   // بیوگرافی کاربر
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
  comments Comment[]
  likes    Like[]
  authorRequests AuthorRequest[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String   @unique
  content   String   // متن کامل پست (markdown یا html)
  excerpt   String?  // خلاصه پست
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  
  // Relations
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  
  // Image fields
  coverUrl  String?  // آدرس تصویر کاور
  coverAlt  String?  // متن جایگزین تصویر
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  approved  Boolean  @default(false)
  
  // Relations
  authorId  String
  author    User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    Int
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  // Relations
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
}

model AuthorRequest {
  id        Int      @id @default(autoincrement())
  userId    String
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([email])
  @@index([token])
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  
  @@index([email])
  @@index([createdAt])
}

model Newsletter {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  subscribed Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([email])
  @@index([subscribed])
}

model NewsletterCampaign {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  status    String   @default("DRAFT") // DRAFT, SENT, SCHEDULED
  sentAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([status])
  @@index([createdAt])
}

enum Role {
  VIEWER    // کاربر عمومی (بیننده)
  AUTHOR    // نویسنده
  ADMIN     // مدیر کل
}
